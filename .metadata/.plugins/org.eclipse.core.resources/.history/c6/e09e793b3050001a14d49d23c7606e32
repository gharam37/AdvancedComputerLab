import java.util.ArrayList;
import java.util.Collections;
import java.util.Stack;
public class DFA {

	String[] SuccessStates;
	String Representation;
	ArrayList<State> MyStates = new ArrayList<State>();
	public DFA(String Representation,boolean NFA) {
	
		if(NFA) {
			constructNFA(Representation);
		}
		else {
			constructDFA(Representation);

			
		}
		//System.out.println(MyStates.size());
		

		
	}
	public void constructNFA(String NFARepresentation) {
		this.Representation=NFARepresentation;
		ArrayList<State> NFAStates = new ArrayList<State>();
		ArrayList<String> NFASuccessStates = new ArrayList<String>();

		ArrayList<String> NFAStatesNames = new ArrayList<String>();


		String[] parts = NFARepresentation.split("#");

		for(int i=0;i<parts.length;i++)
		{
			String[] transitions = parts[i].split(";");
			for(int j=0;j<transitions.length;j++)
			{
				String[] transitionStates=transitions[j].split(",");
			   //System.out.println(transitionStates[0]);
				if(!NFAStatesNames.contains(transitionStates[0])){
					NFAStatesNames.add(transitionStates[0]);
					NFAStates.add(new State(transitionStates[0]));
					
				}
				// Zero Transitions
			    for (int k=0;k<NFAStates.size();k++) {
				if(NFAStates.get(k).Name.equals(transitionStates[0])) {
					if(i==0) {
							NFAStates.get(k).ZeroStates.add(transitionStates[1]);
					}
					else if(i==1) {
						NFAStates.get(k).OneStates.add(transitionStates[1]);

						
					}
					else if(i==2) {
						NFAStates.get(k).EpsilonStates.add(transitionStates[1]);

					}
					else {
						for (int l=0;l<transitionStates.length;l++) {
							
							NFASuccessStates.add(transitionStates[l]);
							
							
						}
					
						
					}
				}
						
					
					
				}

			}
			

		}
		for (int i=0;i<NFAStates.size();i++)
		{
			System.out.println(NFAStates.get(i));
		}
		/*for (int i=0;i<NFASuccessStates.size();i++)
		{
			System.out.println(NFASuccessStates.get(i));
		}*/
		EpsilonTransitions(NFAStates,NFAStatesNames,NFASuccessStates);
	}
	public void EpsilonTransitions(ArrayList<State> NFAStates,
			ArrayList<String> NFAStatesNames,
			ArrayList<String> SucessStates ) {
		ArrayList<State> ConstructedStates = new ArrayList<State>();
		
		State FirstState=null;
		String FirstStateName=null;
		for (int i=0;i<NFAStates.size();i++) {
			if(NFAStates.get(i).Name.equals("0"));
			FirstState=NFAStates.get(i);
			FirstStateName=NFAStatesNames.get(i);

			break;
		}
		//System.out.println(NFAStatesNames.indexOf(NFAStates.get(3).Name));
		//Change to while !Constructe
		while(!AllConstructed(ConstructedStates)) {
			State CurrentState=null;
			if(ConstructedStates.size()==0) {
				 CurrentState=FirstState;
				 System.out.println("Here");
			}
			else {
				for(int i=0;i<ConstructedStates.size();i++) {
					if(!ConstructedStates.get(i).constructured) {
						CurrentState=ConstructedStates.get(i);
						break;
					}
				}
			}
			ArrayList<State> ClosureStates= GetClosure( CurrentState, NFAStates);
			for(int i=0;i<ClosureStates.size();i++) {
				boolean found=false;
				for(int k=0;k<ConstructedStates.size();k++) {
					if(ConstructedStates.get(k).Name.equals(ClosureStates.get(i).Name))
					{
						found=true;
					}
					
				}
				if(!found) {
					found=false;
					ConstructedStates.add(ClosureStates.get(i));
				}
				
				
			}

			
		}
		
	   this.MyStates=ConstructedStates;
		
		
	
		
	}
	public ArrayList<State> GetClosure(State CurrentState, ArrayList<State> NFAStates){
		ArrayList<State> ClosureStates=null;
		ArrayList<String> OneState=new ArrayList<String>();
		ArrayList<String> ZeroState=new ArrayList<String>();
		//System.out.println(CurrentState);


		Stack<String> OneStateNames = new Stack();

		//GetStateName
		
		ArrayList<String> NewState=new ArrayList<String>();
		NewState.add(CurrentState.Name);
		for(int i=0;i<CurrentState.EpsilonStates.size();i++) {
			NewState.add(CurrentState.EpsilonStates.get(i));
		}
		Collections.sort(NewState);
	//	System.out.println(NewState);

		

        //Add Direct One Transitions		
		for(int j=0;j<NewState.size();j++) {
		for(int i=0;i<NFAStates.size();i++) {
			if(NFAStates.get(i).Name.equals(NewState.get(j))) {
				for(int k=0;k<NFAStates.get(i).OneStates.size();k++) {
					OneStateNames.push((NFAStates.get(i)).OneStates.get(k));
				}
			}
		}
		}
		
		//System.out.println(OneStateNames);
		//One Closure
		while(!OneStateNames.isEmpty()) {
			String StateName= OneStateNames.pop();
			State s=null;
			for (int i=0;i<NFAStates.size();i++) {
				if(NFAStates.get(i).Name.equals(StateName)) {
					if(!OneState.contains(NFAStates.get(i).Name)) {
					OneState.add(NFAStates.get(i).Name);
					s=NFAStates.get(i);
					break;

					}
				}
			}
			//Push Its Epsilon Transitions
			if(s!=null) {
				
				for(int i=0;i<s.EpsilonStates.size();i++) {
					OneStateNames.push(s.EpsilonStates.get(i));
					
				}
			}
		//	System.out.println(OneState);
			
			
			
		}
		Stack<String> ZeroStateNames = new Stack();
         //Add Direct Zero Transitions
		for(int j=0;j<NewState.size();j++) {
			for(int i=0;i<NFAStates.size();i++) {
				if(NFAStates.get(i).Name.equals(NewState.get(j))) {
					for(int k=0;k<NFAStates.get(i).ZeroStates.size();k++) {
						ZeroStateNames.push((NFAStates.get(i)).ZeroStates.get(k));
					}
				}
			}
			}
		// Add Epsilon Transitions
		while(!ZeroStateNames.isEmpty()) {
			String StateName= ZeroStateNames.pop();
			State s=null;
			for (int i=0;i<NFAStates.size();i++) {
				if(NFAStates.get(i).Name.equals(StateName)) {
					if(!ZeroState.contains(NFAStates.get(i).Name)) {
					ZeroState.add(NFAStates.get(i).Name);
					s=NFAStates.get(i);
					break;

					}
				}
			}
			//Push Its Epsilon Transitions
			if(s!=null) {
				
				for(int i=0;i<s.EpsilonStates.size();i++) {
					ZeroStateNames.push(s.EpsilonStates.get(i));
					
				}
			}
		//	System.out.println(OneState);
			
			
			
		}
		if(NewState.isEmpty()) {
			State One=new State(NewState.toString());
			State Zero=new State(NewState.toString());
			State State= new State(NewState.toString(),ZeroState.toString(),OneState.toString());
		}
		else {
		Collections.sort(OneState);
		Collections.sort(ZeroState);
        //System.out.println(NewState);
		//System.out.println(OneState);
		//System.out.println(ZeroState.toString());
		State One=new State(OneState.toString());
		State Zero=new State(ZeroState.toString());
		State State= new State(NewState.toString(),ZeroState.toString(),OneState.toString());
		State.constructured=true;
		System.out.println(State);
		ClosureStates=new ArrayList<State>();
	    ClosureStates.add(State);
		ClosureStates.add(Zero);
		ClosureStates.add(One);
		}
		

		return ClosureStates;
		
	}
	public boolean AllConstructed(ArrayList<State> ConstructedStates) {
		if(ConstructedStates.size()==0) {
			return false;
		} //Change Later to False
		for(int i=0;i<ConstructedStates.size();i++) {
			if(!ConstructedStates.get(i).constructured)
			{
				return false;
			}
		
		}
		return true;
		
	}
	public void constructDFA(String DFARepresentation) {
		this.Representation=DFARepresentation;
		String[] parts = DFARepresentation.split("#");
		String[] States=parts[0].split(";");
		SuccessStates=parts[1].split(",");
		for(int i=0;i<States.length;i++)
		{
			String[] StateArray=States[i].split(",");
			State s=new State(StateArray[0],StateArray[1],StateArray[2]);
			MyStates.add(s);
			//System.out.println(s);
			
		}
		
	}
	public boolean run(String Input) {
		boolean Success=false;

		String[] InputArray=Input.split(",");
		String CurrentState="0";
		for(int i=0;i<InputArray.length;i++) {
			for(int j=0;j<MyStates.size();j++) {
				if(MyStates.get(j).Name.equals(CurrentState)) {
					if(InputArray[i].equals("0"))
					{
						//System.out.println("Zero Given");
						//System.out.println(CurrentState);

						CurrentState=MyStates.get(j).ZeroState;
						//System.out.println(CurrentState);

					}
					else if(InputArray[i].equals("1"))
					{
						//System.out.println("One Given");
						//System.out.println(CurrentState);

						CurrentState=MyStates.get(j).OneState;
						//System.out.println(CurrentState);
					}
					else {
						return false;
					}
					break;
					
				}
			}
			
		}
		System.out.println(CurrentState);
		for(int i=0;i<SuccessStates.length;i++) {
			if(CurrentState.equals(SuccessStates[i])) {

				return true;
			}
			
		}
		return false;
		
	}
	public String toString() {
		return Representation;
		
		
	}
	public static void main(String[]args) {
		DFA dfa= new DFA("0,0;1,2;3,3#0,0;0,1;2,3;3,3#1,2#3",true);
		//System.out.println("First DFA" );
		//System.out.println(dfa);
		/*System.out.println(dfa.run("1,0,1,0,0"));
		System.out.println(dfa.run("0,0,0,1,0"));
		System.out.println(dfa.run("0,0,1,0,1,0,0,0"));
		System.out.println(dfa.run("1,0,1,1,1,1,1"));
		System.out.println(dfa.run("1,1,0,1,1"));*/

		ArrayList <String> List=new ArrayList<String>();


		//System.out.println(List);




        

		//System.out.println(dfa);
	}
}
